// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Band {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @db.VarChar(255)
  songs     Song[]
  setLists  SetList[]
  users     User[]
}

model Song {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  key       String   @db.VarChar(255)
  artist    String?  @db.VarChar(255)
  band      Band     @relation(fields: [bandId], references: [id])
  bandId    Int
  setLists  SetListSong[]
  data      Json?
  spotifyPerfectMatch Boolean @default(false)
  setSongs  SetSong[]
  tags      Json?
  chart     String?
  // New field
  endTime   DateTime?
}

model SetList {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  songs     SetListSong[]
  band      Band     @relation(fields: [bandId], references: [id])
  bandId    Int
  sets      Set[]
  // New optional fields
  time      DateTime?
  location  String?   @db.VarChar(255)
  details   String?   @db.Text
  personel  Json?
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  bands         Band[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model SetListSong {
  id        Int      @id @default(autoincrement())
  setList   SetList  @relation(fields: [setListId], references: [id], onDelete: Cascade)
  setListId Int
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    Int
  order     Int      // The position of the song in the setlist

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([setListId, songId])
  @@index([songId])
  @@index([setListId, order])
}

model Set {
  id        Int      @id @default(autoincrement())
  setList   SetList  @relation(fields: [setListId], references: [id], onDelete: Cascade)
  setListId Int
  name      String   @db.VarChar(255)
  order     Int      // The position of the set within the setlist
  setSongs  SetSong[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([setListId, order])
}

model SetSong {
  id      Int    @id @default(autoincrement())
  set     Set    @relation(fields: [setId], references: [id], onDelete: Cascade)
  setId   Int
  song    Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId  Int
  order   Int    // The position of the song within the set

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([setId, songId])
  @@index([songId])
  @@index([setId, order])
}
